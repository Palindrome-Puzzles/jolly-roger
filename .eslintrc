{
  "parser": "babel-eslint",
  "parserOptions": {
    "allowImportExportEverywhere": false,
  },
  "plugins": [
    "meteor",
  ],
  "extends": [
    "airbnb",
    "plugin:meteor/recommended",
    "plugin:import/errors",
    "plugin:import/warnings",
  ],
  "settings": {
    "import/resolver": "meteor",
  },
  "rules": {
    // explicit returns can sometimes be more readable and avoid the issue of "I want to return an
    // object literal but ES6 interprets it as a function body with a void expression"
    "arrow-body-style": ["off"],

    // Publish functions don't really need to be named.
    "func-names": ["off"],

    // For Match expressions
    "new-cap": ["error", { "capIsNewExceptions": ["Optional", "OneOf", "Maybe", "ObjectIncluding"] }],

    // sometimes else after a return reads more clearly
    "no-else-return": ["off"],

     // We sometimes use these in various forms
    "no-underscore-dangle": ["error",
      {
        "allow": [
          "_id", "_this", "_ensureIndex", "_dropIndex", "_redirectUri", "_postRequest",
          "_anyMethodsAreOutstanding", "_schemaKeys", "_schema", "_retrieveCredentialSecret",
        ],
      }
    ],

    // We have files with multiple React components.  Maybe we should split them out
    // later, but right now I don't want to deal with this
    "react/no-multi-comp": ["off"],

    // Specifying explicit propTypes is worthwhile
    "react/prefer-stateless-function": ["off"],

    // While this rule is generally useful, it currently gets confused by Meteor's import rewriting
    // for import { thing } from "meteor/meteorpackagename", so we need it to chill out.
    "import/no-extraneous-dependencies": ["off"],

    // Absolute imports work with Meteor, but aren't well-understood by IDEs, like VS Code
    "import/no-absolute-path": ["error"],

    // We use imports with extensions. Maybe it's not required, but maintain consistency
    "import/extensions": ["error", "ignorePackages"],

    // This seems incompatible with React.createClass
    "react/no-this-in-sfc": ["off"],

    // We should really fix this if we can
    "react/forbid-prop-types": ["off"],

    // This is complaining a lot and I don't really want to write dozens of lines of
    // default prop values of `undefined`
    "react/require-default-props": ["off"],

    // This rule seems to be failing to detect that accessing this.props inside
    // fat-arrow functions in fact use the prop
    "react/no-unused-prop-types": ["off"],

    // The eslint guide seems to claim that adding "static" to method
    // definitions is a noop, but that doesn't seem to be true in practice, and I
    // don't understand the prototype model well enough to understand why.
    "class-methods-use-this": ["off"],

    // Match existing style
    "operator-linebreak": ["error", "after"],
    "prefer-destructuring": ["off"],
    "comma-dangle": ["error", {
      "arrays": "always-multiline",
      "objects": "always-multiline",
      "imports": "always-multiline",
      "exports": "always-multiline",
      "functions": "ignore",
    }],
    "no-plusplus": ["error", { "allowForLoopAfterthoughts": true }],
    "react/destructuring-assignment": ["off"],
    "jsx-a11y/accessible-emoji": ["off"],
    "jsx-a11y/click-events-have-key-events": ["off"],
    "jsx-a11y/no-static-element-interactions": ["off"],
    "jsx-a11y/media-has-caption": ["off"],
  },
  "globals": {
    // Long-term, reduce this list to nothing by making full use of import/export
    "Roles": false,
    "ServiceConfiguration": false,
    "Google": false,
    "Npm": false,
    "OAuth": false,
    "window": false,
    "document": false,
  },
}
