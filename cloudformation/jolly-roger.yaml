# This YAML file, when loaded and dumped as JSON, can be used as a
# CloudFormation Stack to spin up the jolly-roger environment. YAML is
# used instead of JSON for comments and easier-to-read formatting, but
# we should refrain from using any fancier features of YAML.
#
# The jolly-roger environment consists of:
#
# - A VPC with a public subnet (no support currently for private
#   subnets or NAT)
#
# - A system for fetching secrets using github.com/ebroder/sneaker (a
#   fork of github.com/codahale/sneaker), which encrypts secrets using
#   KMS and stores them in S3.
#
# - An auto-scaling group with instances that automatically launch the
#   jolly-roger application via Docker images (and automatically
#   update using Watchtower), pulling secrets using sneaker as
#   necessary
#
# It's possible this could be used to run multiple parallel copies of
# the jolly-roger website, though that's not very likely in practice.
#
# To spin up an independent copy of jolly-roger, you'll _definitely_
# need to do the following (and probably more I've forgotten):
#
# - Create an S3 bucket to store secrets (you'll provde this as
#   SneakerS3Bucket)
#
# - Create a new KMS key to store secrets (you'll provide this in
#   SneakerKey)
#
# - Generate the config.yml file for the registry. Starting with
#   http://git.io/vERX3, add a section labeled proxy. Include the keys
#   username and password with values for an account that has access
#   to the ebroder/jolly-roger image, and set remoteurl:
#   https://registry-1.docker.io. Store this using `sneaker upload
#   <path> registry/config.yml`
#
# - Store the MongoDB URL using `sneaker upload <path> mongo`. The
#   free account from mongolab (for instance) should be sufficient.

AWSTemplateFormatVersion: "2010-09-09"
Description: jolly-roger

Parameters:
  AppUrl:
    Description: The URL of application
    Type: String
    Default: future.deathandmayhem.com
  SneakerS3Bucket:
    Description: S3 bucket where secrets should be stored (in the root)
    Type: String
    Default: jolly-roger-sneaker
  SneakerKey:
    Description: UUID of the sneaker master key
    Type: String
    Default: 4d22351a-7610-4d95-a341-61f05203564e
  KeyName:
    Description: Name of an existing EC2 keypair to allow access to all instances
    Type: AWS::EC2::KeyPair::KeyName
  AppInstanceType:
    Description: Instance type to run for app server
    Type: String
    Default: t2.micro

Mappings:
  UbuntuAmis:
    us-east-1: {"ami": ami-0021766a}

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.32.0.0/16
      EnableDnsHostnames: true

  PublicSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: {Ref: VPC}

  InternetGateway:
    Type: AWS::EC2::InternetGateway
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: {Ref: VPC}
      InternetGatewayId: {Ref: InternetGateway}
  PublicRouteToInternet:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: {Ref: InternetGateway}
      RouteTableId: {Ref: PublicSubnetRouteTable}

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: {"Fn::Select": [0, {"Fn::GetAZs": ""}]}
      CidrBlock: 10.32.0.0/24
      MapPublicIpOnLaunch: true
      VpcId: {Ref: VPC}
  PublicSubnet1RouteTableAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: {Ref: PublicSubnetRouteTable}
      SubnetId: {Ref: PublicSubnet1}

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: {"Fn::Select": [1, {"Fn::GetAZs": ""}]}
      CidrBlock: 10.32.1.0/24
      MapPublicIpOnLaunch: true
      VpcId: {Ref: VPC}
  PublicSubnet2RouteTableAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: {Ref: PublicSubnetRouteTable}
      SubnetId: {Ref: PublicSubnet2}

  AppInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: [ec2.amazonaws.com]
            Action: ["sts:AssumeRole"]
      Policies:
        - PolicyName: sneaker-download
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - Fn::Join:
                      - ""
                      -
                        - "arn:aws:s3:::"
                        - {Ref: SneakerS3Bucket}
                        - "/*"
              - Effect: Allow
                Action:
                  - kms:Decrypt
                Resource:
                  - Fn::Join:
                      - ""
                      -
                        - "arn:aws:kms:"
                        - {Ref: "AWS::Region"}
                        - ":"
                        - {Ref: "AWS::AccountId"}
                        - ":key/"
                        - {Ref: SneakerKey}
  AppInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - {Ref: AppInstanceRole}

  AppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for app server instances
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: -1
          FromPort: -1
          ToPort: -1
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
      VpcId: {Ref: VPC}

  AppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      IamInstanceProfile: {Ref: AppInstanceProfile}
      ImageId: 
        Fn::FindInMap:
          - UbuntuAmis
          - {Ref: "AWS::Region"}
          - ami
      InstanceType: {Ref: AppInstanceType}
      KeyName: {Ref: KeyName}
      SecurityGroups:
        - {Ref: AppSecurityGroup}
      UserData:
        Fn::Base64:
          Fn::Join:
            - "\n"
            -
              - '#cloud-config'
              - ''
              - 'package_upgrade: true'
              - ''
              - 'apt_sources:'
              # For golang
              - '  - source: "ppa:ubuntu-lxc/lxd-stable"'
              # For docker
              - '  - source: "deb https://apt.dockerproject.org/repo ubuntu-$RELEASE main"'
              - '    filename: docker.list'
              - '    keyid: 58118E89F3A912897C070ADBF76221572C52609D'
              - ''
              - 'packages:'
              - '  - build-essential'
              - '  - bzr'
              - '  - docker-engine'
              - '  - git'
              - '  - golang'
              - '  - jq'
              - '  - mercurial'
              - '  - subversion'
              - ''
              - 'runcmd:'
              - '  - set -eux'
              - '  - env GOPATH=/usr/local go get -d -u github.com/ebroder/sneaker'
              - '  - env GOPATH=/usr/local sh -c "cd /usr/local/src/github.com/ebroder/sneaker && make install"'
              - '  - mkdir -p /etc/docker/registry'
              - Fn::Join:
                  - ''
                  -
                    - '  - AWS_REGION='
                    - {Ref: "AWS::Region"}
                    - ' SNEAKER_S3_PATH=s3://'
                    - {Ref: SneakerS3Bucket}
                    - ' SNEAKER_MASTER_KEY='
                    - {Ref: SneakerKey}
                    - ' /usr/local/bin/sneaker download registry/config.yml /etc/docker/registry/config.yml'
              - '  - docker run -d --restart=unless-stopped -p 5000:5000 -v /etc/docker/registry:/etc/docker/registry registry:2'
              - '  - sleep 5'
              - Fn::Join:
                  - ''
                  -
                    - '  - docker run -d --restart=unless-stopped -e AWS_REGION='
                    - {Ref: "AWS::Region"}
                    - ' -e SNEAKER_S3_PATH=s3://'
                    - {Ref: SneakerS3Bucket}
                    - ' -e SNEAKER_MASTER_KEY='
                    - {Ref: SneakerKey}
                    - ' -e VIRTUAL_HOST='
                    - {Ref: AppUrl}
                    - ' -e LETSENCRYPT_HOST='
                    - {Ref: AppUrl}
                    - ' -e LETSENCRYPT_EMAIL=evan@ebroder.net -e ROOT_URL=https://'
                    - {Ref: AppUrl}
                    - ' localhost:5000/ebroder/jolly-roger'
              - '  - docker run -d --restart=unless-stopped -p 80:80 -p 443:443 -v /var/run/docker.sock:/tmp/docker.sock:ro dmp1ce/nginx-proxy-letsencrypt'
              - '  - docker run -d --restart=unless-stopped -v /var/run/docker.sock:/var/run/docker.sock centurylink/watchtower --interval 30 --cleanup'
    DependsOn:
      - InternetGatewayAttachment

  AppAsg:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: {Ref: AppLaunchConfig}
      VPCZoneIdentifier:
        - {Ref: PublicSubnet1}
        - {Ref: PublicSubnet2}
      MaxSize: 1
      MinSize: 1
    UpdatePolicy:
      AutoScalingRollingUpdate:
        WaitOnResourceSignals: false
        MinSuccessfulInstancesPercent: 100
        MinInstancesInService: 0
